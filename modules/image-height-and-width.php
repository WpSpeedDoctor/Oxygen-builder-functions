<?php

defined( 'ABSPATH' ) || exit;

/**
 * Description: Adds image height and width to html img element generated by Oxygen. Place CDN domain into attribute field if you're using it.
 * 
 */

if( empty($attribute) ) $attribute = false;

define ( 'OXI_IMG_CDN', $attribute ); 

if ( ! function_exists( 'remove_non_local_images' )){
	function remove_non_local_images( $img_elements_all ) {
		
		$site_url = get_site_url();

		$result = false;

		foreach ( $img_elements_all as $key => $value) {

			if ( strpos( $value, $site_url ) || OXI_IMG_CDN !== false && strpos( $value, OXI_IMG_CDN ) ) $result[] = $value;

		}

		return $result; 
		
	}
}



if ( ! function_exists( 'oximg_get_images_elements' )){
	function oximg_get_images_elements( $buffer = false ) {
	
		if ( !$buffer ) return false;

		preg_match_all('/<img[\S\s]*?\>/', $buffer, $img_elements);
		
		$img_elements_all = call_user_func_array('array_merge', $img_elements);

		$result = remove_non_local_images($img_elements_all);

		return $result;
	}
}

if ( ! function_exists( 'oximg_get_width_height_string_from_db' )){
	function oximg_get_width_height_string_from_db( $filename ) {
	
		global $wpdb;

		$sql = "SELECT `meta_value` FROM `".$wpdb->prefix."postmeta` WHERE `meta_key` = '_wp_attachment_metadata' AND `meta_value` LIKE '%$filename%'";
	
		$image_raw_data = $wpdb->get_row($sql, 'ARRAY_N');

		if ( empty($image_raw_data) ) return false;

		return unserialize($image_raw_data[0]);

	
	}
}


if ( ! function_exists( 'oximg_get_width_height_string' )){
	function oximg_get_width_height_string( $filename ) {
		
		$image_data_array = oximg_get_width_height_string_from_db( $filename );

		if ( empty($image_data_array) ) return false;

		if ( basename($image_data_array['file']) == $filename ) {

			return 'width="'.$image_data_array['width'].'" height="'.$image_data_array['height'].'"';

		}

		if ( empty($image_data_array['sizes']) ) return false;


		foreach ( $image_data_array['sizes'] as $key => $value ) {

			if ( $value['file'] == $filename ) {

				return 'width="'.$value['width'].'" height="'.$value['height'].'"';

			}

		}
			
		return false;
	
	}
}


if ( ! function_exists( 'oximg_get_images_data' )){
	function oximg_get_images_data( $img_elements ) {
		
		$result = false;

		foreach ($img_elements as $key => $img_element ) {

			if ( strpos($img_element, 'width=' ) !== false ) continue;

			preg_match('/src="([\S\s]*?)"/', $img_element, $output_array );

			$filename = basename( $output_array[1]);

			$img_string = oximg_get_width_height_string($filename);

			if (!empty($img_string) ) $result[] = array( 'html' => $img_element, 'add_string' => $img_string );

		}

	return $result;
	}
}

if ( ! function_exists( 'oximg_add_height_with_to_imgs' )){
	function oximg_add_height_with_to_imgs( $buffer, $img_data_array ) {
	
		foreach ($img_data_array as $key => $value) {

			$element_with_width_height = str_replace( '>', ' '.$value['add_string'].'>', $value['html'] );

			$buffer = str_replace( $value['html'], $element_with_width_height, $buffer );
		}
		
		return $buffer;
	}
}


function oximg_far_ob_call( $buffer ) { 

    $img_elements = oximg_get_images_elements( $buffer );
    
    if (!$img_elements) return $buffer;

    $img_data_array = oximg_get_images_data( $img_elements );

    if (!$img_data_array) return $buffer;

    $output = oximg_add_height_with_to_imgs( $buffer, $img_data_array );

    return $output;
}

function oximg_template_redirect() {

	if ( isset($_GET['ct_template']) or isset($_GET['ct_builder']) ) return; 

    ob_start();
    ob_start( 'oximg_far_ob_call' );
}
 
add_action( 'template_redirect', 'oximg_template_redirect' );


